#!/bin/bash

CONFIG_FILE=~/.vpn_config
DEFAULT_FILE=~/.vpn_default

# Ensure the config file exists
if [ ! -f "$CONFIG_FILE" ]; then
    touch "$CONFIG_FILE"
fi

# Check for sshpass dependency
if ! command -v sshpass &>/dev/null; then
    echo "Warning: 'sshpass' is required for password-based authentication but is not installed."
fi

# Function to list VPN connections using fzf
list_connections() {
    if [ ! -s "$CONFIG_FILE" ]; then
        echo "No VPN connections found."
        return 1
    fi
    awk -F, '{print NR ") " $1 " (" $2 ")"}' "$CONFIG_FILE" | fzf --header="Available VPN connections" --height=10 --border
}

# Function to add a new VPN connection
add_connection() {
    read -p "Enter a name for the VPN: " name
    read -p "Enter SSH username@host: " user_host
    read -p "Enter SOCKS proxy port (default: 1080): " port
    port=${port:-1080}

    read -p "Enter SSH port (default: 22): " ssh_port
    ssh_port=${ssh_port:-22}

    read -p "Enter path to .pem key file (leave blank for password-based auth): " key_path
    read -s -p "Enter password (leave blank if using key): " password
    echo

    echo "$name,$user_host,$port,$ssh_port,$key_path,$password" >> "$CONFIG_FILE"
    echo "VPN '$name' added successfully."
}

# Function to delete a VPN connection
delete_connection() {
    selected=$(list_connections)
    [[ -z "$selected" ]] && echo "No VPN selected." && return
    num=$(echo "$selected" | grep -o '^[0-9]\+')
    sed -i "${num}d" "$CONFIG_FILE"
    echo "VPN deleted successfully."
}

# Function to update an existing VPN connection
update_connection() {
    selected=$(list_connections)
    [[ -z "$selected" ]] && echo "No VPN selected." && return
    num=$(echo "$selected" | grep -o '^[0-9]\+')
    line=$(sed -n "${num}p" "$CONFIG_FILE" | tr -d '\r\n')

    # Parse the selected line
    IFS=',' read -r name user_host port ssh_port key_path password <<< "$line"
    
    read -p "Enter a new name (current: $name): " new_name
    read -p "Enter SSH username@host (current: $user_host): " new_user_host
    read -p "Enter SOCKS proxy port (current: $port): " new_port
    read -p "Enter SSH port (current: $ssh_port): " new_ssh_port
    read -p "Enter path to .pem key file (current: $key_path): " new_key_path
    read -s -p "Enter password (leave blank to keep current): " new_password
    echo

    # Update values if provided, or keep existing
    new_name=${new_name:-$name}
    new_user_host=${new_user_host:-$user_host}
    new_port=${new_port:-$port}
    new_ssh_port=${new_ssh_port:-$ssh_port}
    new_key_path=${new_key_path:-$key_path}
    new_password=${new_password:-$password}

    sed -i "${num}s/.*/$new_name,$new_user_host,$new_port,$new_ssh_port,$new_key_path,$new_password/" "$CONFIG_FILE"
    echo "VPN '$new_name' updated successfully."
}

# Function to connect to a VPN and keep it alive with auto-reconnect
connect_vpn() {
    if [ -n "$1" ]; then
        line=$(sed -n "${1}p" "$CONFIG_FILE" | tr -d '\r\n')
    else
        selected=$(list_connections)
        [[ -z "$selected" ]] && echo "No VPN selected." && return
        num=$(echo "$selected" | grep -o '^[0-9]\+')
        line=$(sed -n "${num}p" "$CONFIG_FILE" | tr -d '\r\n')
    fi

    # Check if line is valid
    if [ -z "$line" ]; then
        echo "Error: No VPN found at the specified location in the config file."
        return
    fi

    # Parse line
    IFS=',' read -r name user_host port ssh_port key_path password <<< "$line"

    # Ensure required fields are set
    if [ -z "$user_host" ] || [ -z "$port" ] || [ -z "$ssh_port" ]; then
        echo "Error: Missing required information in configuration."
        return
    fi

    echo "Connecting to VPN '$name' at $user_host on port $port with SSH port $ssh_port..."
    
    # Infinite loop to keep the connection alive and reconnect if needed
    while true; do
        if [ -n "$key_path" ]; then
            ssh -o "ServerAliveInterval=60" -o "ServerAliveCountMax=3" -i "$key_path" -p "$ssh_port" -D "$port" "$user_host"
        elif [ -n "$password" ]; then
            sshpass -p "$password" ssh -o "ServerAliveInterval=60" -o "ServerAliveCountMax=3" -p "$ssh_port" -D "$port" "$user_host"
        else
            echo "Error: No authentication method specified (key or password)."
            break
        fi

        # Check exit status of SSH
        if [ $? -ne 0 ]; then
            echo "Connection to VPN '$name' lost. Reconnecting in 5 seconds..."
            sleep 5  # Wait before retrying
        else
            # Break out of the loop if SSH connection exits normally
            echo "Disconnected from VPN '$name'. Exiting."
            break
        fi
    done
}


# Function to set the default VPN connection
set_default() {
    selected=$(list_connections)
    [[ -z "$selected" ]] && echo "No VPN selected." && return
    num=$(echo "$selected" | grep -o '^[0-9]\+')
    echo "$num" > "$DEFAULT_FILE"
    echo "Default VPN set successfully."
}

# Connect to the default VPN if -d flag is provided
if [ "$1" == "-d" ]; then
    if [ -f "$DEFAULT_FILE" ]; then
        default_num=$(cat "$DEFAULT_FILE")
        connect_vpn "$default_num"
    else
        echo "No default VPN set. Use option 6 to set one."
    fi
    exit 0
fi

# Main menu with fzf
echo "Select an option:"
options=("List VPNs" "Add VPN" "Delete VPN" "Update VPN" "Connect to VPN" "Set Default VPN")
choice=$(printf "%s\n" "${options[@]}" | fzf --prompt="Select an option: " --height=10 --border)

case $choice in
    "List VPNs") list_connections ;;
    "Add VPN") add_connection ;;
    "Delete VPN") delete_connection ;;
    "Update VPN") update_connection ;;
    "Connect to VPN") connect_vpn ;;
    "Set Default VPN") set_default ;;
    *) echo "Invalid option." ;;
esac
